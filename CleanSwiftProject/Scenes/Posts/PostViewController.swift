//
//  PostViewController.swift
//  CleanSwiftProject
//
//  Created by Вячеслав Квашнин on 13.06.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PostDisplayLogic: AnyObject {
    func displayInitialData(viewModel: PostScene.Load.ViewModel)
}

class PostViewController: UIViewController {
        
    var interactor: PostBusinessLogic?
    var router: (NSObjectProtocol & PostRoutingLogic & PostDataPassing)?
    let postView = PostView()
    var arrayPosts = [Post]()
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    override func loadView() {
        view = postView
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        loadInitialData()
        
        postView.tableView.register(PostCell.self, forCellReuseIdentifier: PostCell.cellIdentifier)
        postView.tableView.dataSource = self
        postView.tableView.delegate = self
        
        title = "VC" 
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
        
    private func loadInitialData() {
        let request = PostScene.Load.Request()
        interactor?.doLoadInitialData(request: request)
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = PostInteractor()
        let presenter = PostPresenter()
        let router = PostRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

extension PostViewController: PostDisplayLogic {
    func displayInitialData(viewModel: PostScene.Load.ViewModel) {
        arrayPosts = viewModel.posts
        postView.tableView.reloadData()
    }
}

extension PostViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        arrayPosts.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: PostCell.cellIdentifier, for: indexPath) as? PostCell {
            let post = arrayPosts[indexPath.row]
            cell.titleLabel.text = post.title
            cell.contentLabel.text = post.body
            return cell
        } else {
            return UITableViewCell()
        }
    }
    
    
}

extension PostViewController: UITableViewDelegate {
    
}
